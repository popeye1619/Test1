{"version":3,"sources":["assests/caravan.jpg","assests/faces.jpg","assests/personalise.jpg","assests/social.jpg","assests/t&l.jpg","components/ExperientialTravel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridLayout","styled","div","Text","p","ImageBody","ImageBodyCustom","ImageSize","img","ImageSize1","ImageSize2","ImageSize3","ImageSize4","ImageSize5","Travel","src","img2","img1","img3","img4","img5","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,irDCQ3C,IAAMC,EAAaC,IAAOC,IAAV,KASVC,EAAOF,IAAOG,EAAV,KAaJC,EAAYJ,IAAOC,IAAV,KASTI,EAAkBL,YAAOI,EAAPJ,CAAH,KAMfM,EAAWN,IAAOO,IAAT,KAUTC,EAAaR,YAAOM,EAAPN,CAAH,KAKVS,EAAaT,YAAOM,EAAPN,CAAH,KAIVU,EAAaV,YAAOM,EAAPN,CAAH,KAIVW,EAAaX,YAAOM,EAAPN,CAAH,KAIVY,EAAaZ,YAAOM,EAAPN,CAAH,KAiBDa,EAZA,WACX,OACG,kBAACd,EAAD,KACI,kBAACK,EAAD,KAAW,kBAACF,EAAD,yBAA6B,kBAACM,EAAD,CAAYM,IAAKC,OACzD,kBAACV,EAAD,KAAiB,kBAACH,EAAD,wBAA4B,kBAACO,EAAD,CAAYK,IAAKE,OAC9D,kBAACZ,EAAD,KAAW,kBAACF,EAAD,6BAAiC,kBAACQ,EAAD,CAAYI,IAAKG,OAC7D,kBAACb,EAAD,KAAW,kBAACF,EAAD,uBAA2B,kBAACS,EAAD,CAAYG,IAAKI,OACvD,kBAACd,EAAD,KAAW,kBAACF,EAAD,6BAAiC,kBAACU,EAAD,CAAYE,IAAKK,SCvEzDC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.deccdd37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/caravan.818eea62.jpg\";","module.exports = __webpack_public_path__ + \"static/media/faces.959041cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/personalise.87072815.jpg\";","module.exports = __webpack_public_path__ + \"static/media/social.489f19dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/t&l.a6a7adc8.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport img1 from '../assests/caravan.jpg';\nimport img2 from '../assests/faces.jpg';\nimport img3 from '../assests/personalise.jpg';\nimport img4 from '../assests/social.jpg';\nimport img5 from '../assests/t&l.jpg';\n\nconst GridLayout = styled.div`\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr;\nposition: fixed;\ngrid-row-gap: 2em;\ngrid-column-gap: 2em;\nmargin: 100px 450px;\n`;\n\nconst Text = styled.p`\nposition: relative;\nz-index: 1;\ncolor: white;\nfont-size: 25px;\nfont-weight: bold;\ntext-align: center;\nfont-family: \"Lato\", sans-serif;\nposition: absolute;\ntransform: translate(20px, 100px);\n`;\n\n\nconst ImageBody = styled.div`\nwidth: 300px; \nheight: 300px; \noverflow: hidden;\n\n`;\n\n\n\nconst ImageBodyCustom = styled(ImageBody)`\nwidth: 635px;\ngrid-column: 2/4;\n`;\n\n\nconst ImageSize= styled.img`\nobject-fit: cover;\ntransition: 0.5s all ease-in-out; \nfilter: saturate(100%) brightness(75%);\n&:hover{\n    transform: scale(1.1);\n    filter: saturate(100%) brightness(55%);\n}\n`;\n\nconst ImageSize1 = styled(ImageSize)`\nwidth: 300px; \nheight: 300px;\n`;\n\nconst ImageSize2 = styled(ImageSize)`\nwidth: 650px; \nheight: 300px;\n`;\nconst ImageSize3 = styled(ImageSize)`\nwidth: 300px; \nheight: 300px;\n`;\nconst ImageSize4 = styled(ImageSize)`\nwidth: 300px; \nheight: 300px;\n`;\nconst ImageSize5 = styled(ImageSize)`\nwidth: 300px; \nheight: 300px;\n`;\n\nconst Travel = () => {\n    return(\n       <GridLayout>\n           <ImageBody><Text>Travel and Learn</Text><ImageSize1 src={img2}/></ImageBody>\n           <ImageBodyCustom><Text>Travel Caravans</Text><ImageSize2 src={img1}/></ImageBodyCustom>\n           <ImageBody><Text>Volunteer and Travel</Text><ImageSize3 src={img3}/></ImageBody>\n           <ImageBody><Text>Faces of India</Text><ImageSize4 src={img4}/></ImageBody>\n           <ImageBody><Text>Personalised Travel </Text><ImageSize5 src={img5}/></ImageBody>\n       </GridLayout>\n    );\n}\n\nexport default Travel;","import React from 'react';\nimport Travel from './components/ExperientialTravel';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Travel/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}